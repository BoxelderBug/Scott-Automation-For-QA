/**
 * QA Field Report generator
 * - Runs only when Convert To Docs!A2 is TRUE, then resets it to FALSE
 * - Title: normal paragraph, bold 18, no indent, no spacing-before (flush-left)
 * - Body text: 11 pt everywhere
 * - Key Summary Findings: bold header (11) + blank lines; forced to last page
 * - Location #: prefers trailing " space + digits " (e.g., "... 1686795"), falls back to legacy formats
 * - Removes "Name and account Number"
 * - Auditor from header (works with your new column B)
 * - De-dupes by sanitized filename "QA Field Report - [Technician] [M-d-yy]"
 */

const CONFIG = {
  timezone: 'America/Chicago',

  // Folder & spreadsheet
  sourcePath: [
    'Quality Assurance Process (Internal)',
    'Internal QA Audits'
  ],
  sourceSheetName: 'Technician Quality Inspection Form (Responses)',

  // Output folder
  destinationPath: [
    'Quality Assurance Process (Internal)',
    'Internal QA Audits',
    'QA Field Reports',
    'Auto Reports'
  ],

  // Checkbox gate (A2 per your note)
  convertSheetName: 'Convert To Docs',
  convertFlagRangeA1: 'A2',

  // Top metadata fields (plain lines)
  fieldMap: {
    'Audit Date': ['Timestamp', 'Audit Date', 'Date'],
    'Location #': ['Location #', 'Location', 'Account #', 'Account Number'],
    'Type Of Service': ['Type of Service', 'Type Of Service', 'Service Type'],
    'Auditor': ['Auditor', 'Audited By'],
    'Technician': ['Technician Name', 'Technician', 'Employee'],
    'Email': ['Email Address', 'Email', 'Technician Email', 'Contact Email']
  },

  // Ratings shown; values found via fuzzy matching of long form headers
  ratingsOrder: [
    'Notes & Product Use',
    'Exterior Condition',
    'Equipment Condition',
    'Product Application',
    'Exclusion Efforts',
    'Interior Rodent Efforts',
    'Interior Pest Control',
    'Paperwork Accuracy',
    'Customer Service'
  ],

  ratingMatchers: {
    'Notes & Product Use': [
      /notes.*products/i, /service ticket/i, /appropriate use of products/i
    ],
    'Exterior Condition': [
      /exterior/i, /web presence/i, /wasp/i, /appropriate service/i
    ],
    'Equipment Condition': [
      /equipment.*clean/i, /good working order/i, /operable|secure/i
    ],
    'Product Application': [
      /products that were used/i, /according to the label/i, /company policy/i
    ],
    'Exclusion Efforts': [
      /current rodent issues/i, /prohibits rodent entry/i, /exclusion/i
    ],
    'Interior Rodent Efforts': [
      /rodent prevention efforts/i
    ],
    'Interior Pest Control': [
      /general pest control.*inside/i, /on the inside of the structure/i
    ],
    'Paperwork Accuracy': [
      /paperwork accuracy/i, /data inputs.*correct/i
    ],
    'Customer Service': [
      /Interview the customer/i, /Customer Service/i, /Rate .*Customer Service/i
    ]
  },

  // Key Summary Findings labels
  keyFindingsLabels: [
    'Documentation',
    'Equipment Servicing',
    'Exterior Maintenance',
    'Customer Communication'
  ],

  // Fallbacks (header matching is used first)
  fallbackColumns: {
    dateColIndex1Based: 1, // A
    techColIndex1Based: 3  // C
  }
};

/**
 * INSTALLABLE TRIGGER: From spreadsheet → On edit → onEditWatcher
 * Reacts only to Convert To Docs!A2 edits. Always flips back to FALSE.
 */
function onEditWatcher(e) {
  const lock = LockService.getScriptLock();
  try {
    lock.tryLock(30000);

    if (!e || !e.range) return;
    var sheet = e.range.getSheet();
    if (sheet.getName() !== CONFIG.convertSheetName) return;
    if (e.range.getA1Notation() !== CONFIG.convertFlagRangeA1) return;

    // Only run when box changed to TRUE
    var newVal = (typeof e.value !== 'undefined') ? e.value : String(e.range.getValue());
    var isTrue = (newVal === true) || (String(newVal).toUpperCase() === 'TRUE');
    if (!isTrue) return;

    Logger.log('Checkbox TRUE detected — starting report generation…');
    runQaReportGeneration();
    Logger.log('Report generation finished.');

  } catch (err) {
    Logger.log('onEditWatcher error: ' + (err && err.stack ? err.stack : err));
  } finally {
    // Always uncheck, even on error
    try {
      var ss = (e && e.source) ? e.source : SpreadsheetApp.getActiveSpreadsheet();
      var tab = ss.getSheetByName(CONFIG.convertSheetName);
      if (tab) tab.getRange(CONFIG.convertFlagRangeA1).setValue(false);
      SpreadsheetApp.flush();
      Logger.log('Checkbox reset to FALSE.');
    } catch (err2) {
      Logger.log('Failed to reset checkbox: ' + err2);
    }
    try { lock.releaseLock(); } catch (_) {}
  }
}

/**
 * Main generator.
 * NOTE: Because the script is container-bound now, we use the active spreadsheet.
 * (locateSpreadsheet_ remains available if you ever move back to a standalone project.)
 */
function runQaReportGeneration() {
  // Use the sheet this script is bound to
  const ss = SpreadsheetApp.getActiveSpreadsheet();

  // Work off the responses tab
  const sheet = pickLikelyFormSheet_(ss);
  const data = getSheetDataWithHeaders_(sheet);
  if (!data.rows.length) {
    Logger.log('No rows.');
    return;
  }

  // Fill blanks with "N/A" (except timestamp) and write back
  const changed = fillBlanksWithNA_(data);
  if (changed) {
    sheet.getRange(2, 1, data.rows.length, data.headers.length).setValues(data.rows);
  }

  // Group by (Technician, Date-only)
  const groups = groupRowsByTechAndDate_(data);

  // Destination
  const destFolder = ensureFolderPath_(CONFIG.destinationPath);
  if (!destFolder) throw new Error('Destination path could not be created.');

  // Create reports
  groups.forEach(function(group) {
    const rawName = 'QA Field Report - ' + group.tech + ' ' + group.date;
    const docName = filenameSanitized_(rawName);
    if (fileExistsInFolder_(destFolder, docName)) {
      Logger.log('Skip existing: ' + docName);
      return;
    }

    const doc = DocumentApp.create(docName);
    const docFile = DriveApp.getFileById(doc.getId());
    try { destFolder.addFile(docFile); } catch (e) { Logger.log('addFile warning: ' + e); }
    try { DriveApp.getRootFolder().removeFile(docFile); } catch (e) { Logger.log('removeFile warning: ' + e); }

    renderReport_(doc, group, data.headers);
    doc.saveAndClose();

    Logger.log('Created: ' + docName);
  });
}

/** ---------- CONVERT TO DOCS (optional helpers retained) ---------- **/

function readConvertFlag_(ssOpt) {
  const ss = ssOpt || locateSpreadsheet_();
  const tab = ss.getSheetByName(CONFIG.convertSheetName);
  if (!tab) return false;
  const v = tab.getRange(CONFIG.convertFlagRangeA1).getValue();
  return v === true || String(v).toUpperCase() === 'TRUE';
}

function setConvertFlag_(ssOpt, val) {
  const ss = ssOpt || locateSpreadsheet_();
  const tab = ss.getSheetByName(CONFIG.convertSheetName);
  if (!tab) return;
  tab.getRange(CONFIG.convertFlagRangeA1).setValue(!!val);
}

/** If you ever move this back to a standalone project, this will re-locate the sheet by path. */
function locateSpreadsheet_() {
  const srcFolder = getFolderByPath_(CONFIG.sourcePath);
  if (!srcFolder) throw new Error('Source base folder not found: ' + CONFIG.sourcePath.join(' / '));
  const ssFile = getFileByNameInFolder_(srcFolder, CONFIG.sourceSheetName);
  if (!ssFile) throw new Error('Spreadsheet not found in source folder: ' + CONFIG.sourceSheetName);
  return SpreadsheetApp.openById(ssFile.getId());
}

/** ---------- SHEET HELPERS ---------- **/

function pickLikelyFormSheet_(ss) {
  return ss.getSheetByName('Form Responses 1') || ss.getSheets()[0];
}

function getSheetDataWithHeaders_(sheet) {
  const values = sheet.getDataRange().getValues();
  if (!values.length) return { headers: [], rows: [] };
  const headers = values[0].map(function(h){ return (h || '').toString().trim(); });
  const rows = values.slice(1).map(function(r){
    return r.map(function(c){ return (c === '' || c === null) ? '' : c; });
  });
  return { headers: headers, rows: rows };
}

function fillBlanksWithNA_(data) {
  var changed = false;
  var tsIdx = indexOfHeader_(data.headers, ['Timestamp', 'Audit Date', 'Date']);
  for (var r = 0; r < data.rows.length; r++) {
    for (var c = 0; c < data.headers.length; c++) {
      if (c === tsIdx) continue;
      if (data.rows[r][c] === '') {
        data.rows[r][c] = 'N/A';
        changed = true;
      }
    }
  }
  return changed;
}

/** ---------- GROUPING ---------- **/

function groupRowsByTechAndDate_(data) {
  var tz = CONFIG.timezone;
  var dateIdx = indexOfHeader_(data.headers, ['Timestamp', 'Audit Date', 'Date'], CONFIG.fallbackColumns.dateColIndex1Based - 1);
  var techIdx = indexOfHeader_(data.headers, ['Technician Name', 'Technician', 'Employee'], CONFIG.fallbackColumns.techColIndex1Based - 1);

  var map = {};

  data.rows.forEach(function(row) {
    var rawDate = row[dateIdx];
    var tech = (row[techIdx] || '').toString().trim() || 'Unknown';
    var dateOnly = dateOnlyString_(rawDate, tz);
    var key = tech + '||' + dateOnly;
    if (!map[key]) map[key] = { tech: tech, date: dateOnly, rows: [] };
    map[key].rows.push(row);
  });

  return Object.keys(map).map(function(k){ return map[k]; });
}

function dateOnlyString_(value, timezone) {
  var d = (value instanceof Date) ? value : new Date(value);
  if (isNaN(d.getTime())) d = new Date();
  return Utilities.formatDate(d, timezone, 'M-d-yy'); // hyphens keep filenames safe
}

/** ---------- DOC RENDERING ---------- **/

function renderReport_(doc, group, headers) {
  var body = doc.getBody();
  body.clear();

  // ===== Title as NORMAL paragraph (bold 18, no indent, no spacing-before) =====
  var titlePara = body.appendParagraph('QA FIELD SUMMARY REPORT');
  titlePara
    .setHeading(DocumentApp.ParagraphHeading.NORMAL) // avoid Heading 1 style indentation
    .setBold(true)
    .setFontSize(18)
    .setAlignment(DocumentApp.HorizontalAlignment.LEFT)
    .setIndentStart(0)
    .setIndentFirstLine(0)
    .setIndentEnd(0)
    .setSpacingBefore(0)
    .setSpacingAfter(6);

  // Context (11)
  appendNormal_(body, 'Technician: ' + toText_(group.tech));
  appendNormal_(body, 'Audit Date: ' + toText_(group.date));
  addSpacer_(body, 6);

  // Each inspection row — put each report on its own page
  group.rows.forEach(function(row, idx) {
    if (idx > 0) body.appendPageBreak(); // Report 2 -> page 2, etc.

    // Section title (bold; default indent) — font 11
    var sec = body.appendParagraph('Inspection ' + (idx + 1));
    sec.setBold(true).setFontSize(11);

    // Metadata lines (ALL normal, 11)
    var fieldValues = extractFieldValues_(headers, row);

    appendNormal_(body, 'Audit Date: ' + toText_(fieldValues['Audit Date']));

    // Location # — preferred trailing " space + digits " at end; fallback to legacy
    var locationRaw = fieldValues['Location #'];
    var locationNum = extractLocationNumberTrailing_(locationRaw);
    if (locationNum === null) {
      locationNum = extractLocationNumberLegacy_(locationRaw);
    }
    appendNormal_(body, 'Location #: ' + toText_(locationNum));

    appendNormal_(body, 'Type Of Service: ' + toText_(fieldValues['Type Of Service']));
    appendNormal_(body, 'Auditor: ' + toText_(fieldValues['Auditor']));
    appendNormal_(body, 'Technician: ' + toText_(fieldValues['Technician'] || group.tech));
    appendNormal_(body, 'Email: ' + toText_(fieldValues['Email']));

    addSpacer_(body, 0);

    // Ratings header (bold 11)
    var rh = body.appendParagraph('Inspection Ratings:');
    rh.setBold(true).setFontSize(11);

    // Ratings lines (ALL normal, 11)
    CONFIG.ratingsOrder.forEach(function(label) {
      var v = findRatingValue_(headers, row, label);
      appendNormal_(body, label + ': ' + toText_(v));
    });

    // Observations header (bold 11) + content 11
    var notes = getFirstExisting_(headers, row, [
      'Supply expanded notes on any of the above questions in this space.',
      'Observations & Recommendations', 'Observations', 'Recommendations', 'Notes', 'Comments'
    ]);
    if (notes !== null) {
      addSpacer_(body, 2);
      var oh = body.appendParagraph('Observations & Recommendations:');
      oh.setBold(true).setFontSize(11);
      appendNormal_(body, toText_(notes));
    }
  });

  // Force Key Summary Findings to the LAST PAGE
  body.appendPageBreak();

  // Key Summary Findings — bold header (11) + labeled blank lines (11)
  var ksf = body.appendParagraph('Key Summary Findings:');
  ksf.setBold(true).setFontSize(11);
  CONFIG.keyFindingsLabels.forEach(function(label) {
    appendNormal_(body, label + ':');
    appendNormal_(body, ''); // blank line to type into
  });

  // Footer (11)
  body.appendParagraph('');
  appendNormal_(body, 'Prepared by:');
  appendNormal_(body, 'Adam’s Quality Team');
  var motto = body.appendParagraph('“Doing our Best to be the Best – The Adam’s Way.”');
  motto.setItalic(true).setBold(false).setFontSize(11);

  // ===== Enforce font size 11 everywhere, then bump title back to 18 =====
  var docText = body.editAsText();
  docText.setFontSize(11);
  titlePara.setFontSize(18); // keep title 18 after reset
}

/** ---------- EXTRACTION & MATCHING ---------- **/

// Preferred extractor — captures trailing number with a leading space, e.g. "... 1686795"
function extractLocationNumberTrailing_(value) {
  if (value === null || value === undefined) return null;
  if (typeof value === 'number') return String(value);
  var s = String(value);
  var m = s.match(/\s(\d+)\s*$/);
  return m ? m[1] : null;
}

// Legacy/fallback extractor — handles "1686795, Jean Schreier" and general digit runs
function extractLocationNumberLegacy_(value) {
  if (value === null || value === undefined) return 'N/A';
  if (typeof value === 'number') return String(value);
  var s = String(value);
  if (s.indexOf(',') !== -1) {
    var first = s.split(',')[0].trim();
    var m1 = first.match(/\d+/);
    if (m1) return m1[0];
  }
  var m = s.match(/\d+/);
  return m ? m[0] : 'N/A';
}

function findRatingValue_(headers, row, label) {
  var patterns = CONFIG.ratingMatchers[label] || [];
  var hits = [];

  headers.forEach(function(h, i) {
    var H = (h || '').toString();
    if (patterns.some(function(rx){ return rx.test(H); })) {
      hits.push({ i: i, h: H });
    }
  });

  // Avoid follow-up text like "Were additional..." / "What additional..."
  var filtered = hits.filter(function(x){ return !/^\s*(Were|What)\s+additional/i.test(x.h); });
  var choice = filtered.length ? filtered[0] : (hits[0] || null);
  if (!choice) return 'N/A';

  var val = row[choice.i];
  return (val === null || val === undefined || val === '') ? 'N/A' : val;
}

/** ---------- RENDERING UTILITIES ---------- **/

function toText_(v) {
  if (v === null || v === undefined || v === '') return 'N/A';
  if (v instanceof Date) return Utilities.formatDate(v, CONFIG.timezone, 'M/d/yy h:mm a');
  return String(v);
}

// Normal paragraph helper: NOT bold, font 11
function appendNormal_(body, text) {
  var p = body.appendParagraph(text);
  p.setBold(false).setFontSize(11);
  return p;
}

// Spacer helper: inserts a blank paragraph with given spacingAfter (points)
function addSpacer_(body, spacingAfter) {
  var p = body.appendParagraph('');
  if (typeof spacingAfter === 'number') p.setSpacingAfter(spacingAfter);
  p.setFontSize(11);
  return p;
}

/** ---------- LOOKUPS ---------- **/

function extractFieldValues_(headers, row) {
  var out = {};
  Object.keys(CONFIG.fieldMap).forEach(function(label) {
    var candidates = CONFIG.fieldMap[label];
    var v = getFirstExisting_(headers, row, candidates);
    out[label] = (v === null || v === undefined || v === '') ? 'N/A' : v;
  });
  return out;
}

function getFirstExisting_(headers, row, candidateHeaders) {
  for (var i = 0; i < candidateHeaders.length; i++) {
    var idx = indexOfHeader_(headers, [candidateHeaders[i]]);
    if (idx > -1) return row[idx];
  }
  return null;
}

function indexOfHeader_(headers, names, fallbackIndex) {
  if (fallbackIndex === undefined) fallbackIndex = -1;
  var norm = headers.map(function(h){ return h.toString().trim().toLowerCase(); });
  for (var i = 0; i < names.length; i++) {
    var n = names[i].toString().trim().toLowerCase();
    var j = norm.indexOf(n);
    if (j > -1) return j;
  }
  return fallbackIndex;
}

/** ---------- DRIVE HELPERS ---------- **/

function getFolderByPath_(parts) {
  if (!parts || !parts.length) return null;
  var it = DriveApp.getFoldersByName(parts[0]);
  if (!it.hasNext()) return null;
  var current = it.next();
  for (var i = 1; i < parts.length; i++) {
    current = getChildFolderByName_(current, parts[i]);
    if (!current) return null;
  }
  return current;
}

function ensureFolderPath_(parts) {
  if (!parts || !parts.length) return null;
  var it = DriveApp.getFoldersByName(parts[0]);
  var current = it.hasNext() ? it.next() : DriveApp.createFolder(parts[0]);
  for (var i = 1; i < parts.length; i++) {
    var next = getChildFolderByName_(current, parts[i]);
    if (!next) next = current.createFolder(parts[i]);
    current = next;
  }
  return current;
}

function getChildFolderByName_(parent, name) {
  var it = parent.getFoldersByName(name);
  return it.hasNext() ? it.next() : null;
}

function getFileByNameInFolder_(folder, name) {
  var it = folder.getFilesByName(name);
  return it.hasNext() ? it.next() : null;
}

function fileExistsInFolder_(folder, filename) {
  var it = folder.getFilesByName(filename);
  return it.hasNext();
}

function filenameSanitized_(name) {
  return String(name).replace(/[\\/:*?"<>|]/g, '-');
}
